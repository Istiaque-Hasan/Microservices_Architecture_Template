version: '3.8'

services:
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./auth-service/.env
    depends_on:
      - mongodb
      - rabbitmq
    volumes:
      - auth_node_modules:/app/node_modules
    networks:
      - microservices-network
    restart: unless-stopped

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    env_file:
      - ./product-service/.env
    depends_on:
      - mongodb
      - rabbitmq
      - auth-service
    volumes:
      - product_node_modules:/app/node_modules
    networks:
      - microservices-network
    restart: unless-stopped

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    env_file:
      - ./order-service/.env
    depends_on:
      - mongodb
      - rabbitmq
      - auth-service
    volumes:
      - order_node_modules:/app/node_modules
    networks:
      - microservices-network
    restart: unless-stopped

  inventory-service:
    build: ./inventory-service
    ports:
      - "3003:3000"
    environment:
      - PORT=3000
      - MONGODB_URI=mongodb://mongo:27017/inventory
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongo
      - rabbitmq

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # RabbitMQ messaging
      - "15672:15672" # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  mongodb_data:
  rabbitmq_data:
  auth_node_modules:
  product_node_modules:
  order_node_modules:

networks:
  microservices-network:
    driver: bridge
